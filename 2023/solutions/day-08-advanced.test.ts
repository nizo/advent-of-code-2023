import { test, expect, describe } from "bun:test";

async function solution(file: string): Promise<number> {
	const inputFile = Bun.file(file);
	const text = await inputFile.text();
	const lines = text.split("\n");
	let steps = 0;
	let currentNodes: string[] = [];
	let instructionIndex = 0;
	let stepsNeededForNodes: number[] = [];

	const instructions = lines[0].split("");

	const navigationData: {
		[key: string]: {
			L: string;
			R: string;
		};
	} = {};

	for (let i = 2; i < lines.length; i++) {
		const line = lines[i];

		const baseData = line.split(" = ");
		const location = baseData[0];
		const directionsData = baseData[1].substring(1, baseData[1].length - 1);
		const directions = directionsData.split(", ");

		navigationData[location] = {
			L: directions[0],
			R: directions[1],
		};

		if (location.endsWith("A")) currentNodes.push(location);
	}

	for (let i = 0; i < currentNodes.length; i++) {
		let node = currentNodes[i];

		while (node[node.length - 1] !== "Z") {
			const turn = instructions[instructionIndex];

			// @ts-ignore
			node = navigationData[node][turn];
			instructionIndex = (instructionIndex + 1) % instructions.length;
			steps++;
		}

		stepsNeededForNodes.push(steps);
		steps = 0;
		instructionIndex = 0;
	}

	return findLCM(stepsNeededForNodes);
}

// generated by chatGPT
function gcd(a: number, b: number) {
	if (b === 0) {
		return a;
	} else {
		return gcd(b, a % b);
	}
}

function lcm(a: number, b: number) {
	return (a * b) / gcd(a, b);
}

function findLCM(numbers: number[]) {
	let result = numbers[0];

	for (let i = 1; i < numbers.length; i++) {
		result = lcm(result, numbers[i]);
	}

	return result;
}

const testCases: Array<{
	input: string;
	output: number;
}> = [
	{
		input: "./input/day-08-advanced-01.txt",
		output: 6,
	},
	{
		input: "./input/day-08-base-03.txt",
		output: 15690466351717,
	},
];

describe("advent-of-code-2023 #8", () => {
	test.each(testCases)("", async (item) => {
		const result = await solution(item.input);
		expect(result).toEqual(item.output);
	});
});
